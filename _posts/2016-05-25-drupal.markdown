---
layout: post
title:  "Drupal"
date:   2016-05-25 7:05:52 +1000
categories: Programming
---

Theme and Template
=====================
There are two meanings of 'theme' in Drupal, first one is the folder under 'themes' and it's the whole presentation layer; second one is the [theme API](https://api.drupal.org/api/drupal/includes%21theme.inc/function/theme/7.x).

I would like to talk about second one here. Drupal have its mechanism to cast the content into the mockups, which's suffix is like 'xxxx.tpl.php'. We call the mockup is templates. It looks likes that:
<code goes here>

Templates has the naming convention according to the different components, here's some example:
Fields:
Forms:
Nodetype:

You can get this information when you use [dpm](links goes here) to check the theme suggestion

What if you would like to use some existing template but not in the suggest list? you can use

What if you would like to add some template not use that naming convention? You can use `theme` function, but remember to register the theme before you use that.
<code goes here>


Panelizer vs Panel
====================
Panel is like a container to put all the different kind of components together, a component maybe a view with it's own format, a field in the node, a block provided by the module, a custom html markup. In the panel, we call every component as `pane`

To organize the content better, we could use different layouts. In the layouts, we define several regions in grid system. It's good for the responsive as well.

Here's a sample of layout.
<code goes here>

Panelizer is a super version of the panel. We could turn on panelizer for a content type, create several variation for this content type, and choose which node use a specific variation.

And even more, we could do some special handling base on that variation (e.g. content, layout, context) only for one node.

Ctools Plugins
==================
Ctools module is a contributed module to provide a set of API and function, like Page Manager, Context tools, Access tools (visibility rules), configuration exportability, form wizards and so on.

And the `Plugins` is one of functions this module provide. Using this tool we could extend the modules or themes with `.inc' file. There're 3 kinds of include file: layouts (in theme), content type and styles (in modules, feature).

`content_types` ctools plugin exits in modules, it allow us to create our own panel pane that display dynamic content. In the pane, we could even setup a form to do the configuration.

In `.module` file, we could use `HOOK_ctools_plugin_directory` to register the plugin directory like this:
{% highlight php%}
/**
 * Implements hook_ctools_plugin_directory().
 */
function MODULE_ctools_plugin_directory($owner, $plugin_type) {
  switch ("$owner:$plugin_type") {
    case 'panels:styles':
      return "plugins/$plugin_type";

    case 'panels:content_types':
      return "plugins/$plugin_type";

    case 'ctools:content_types':
      return "plugins/$plugin_type";
  }

  return NULL;
}
{% endhighlight %}

In the `.inc` file itself, we will do 2 things, clarify how to render and how to finish configuration (optional).
{% highlight php%}
$plugin = array(
  'title' => t('TESTING'),
  'description' => t('TESTING'),
  'hook theme' => array(
      'path' => '/PATH/TO/TEMPLATE',
      'template' => 'TEMPLATE-NAME',
    ),
  ),
  'settings form' => 'CALL_BACK_FUNCTION',
);
{% endhighlight %}

`content type` plugins could also lives in features, feature recreate action will not override/ remove the registration or `.inc` file. And we avoid putting `content type` plugins in the theme level, as the pane could be used across different themes.

Here's another sample for the layout include file.
TBC

Form API
==================
[Form API](#) is most used concept in Drupal. There are some many technique(trap) in there area. I list some of them I encounter in daily work.

- Method GET and POST matters, as the form token is needed.
<code goes here>

- You could define the form template like this, and remember you don't need to print all the item manually, we could focus on the fields we want to tailer-make, the rest of them (e.g hidden fields), you could use the `render_form_children` to finish:
<code goes here>

- The class attributes should be stored in a array like this
<code goes here>

  - more more

Block and context
==================
Block is container to wrap the content/logic provided by a module, in this aspect, it's like the pane created by ctools. But block could be put in the region based on the context (e.g. content type, URL). You don't need to configure the setting for every panel/node. As all the setting is done in the module itself.

 This is the classic code for the block.
 <code goes here>


Formatter and Widget
===================
Drupal provide a serias field type to us, but sometimes we need some special field, like the map, icon, feature, which is combination of entity reference, existing field type, taxonomy.

In this case, we need to build a new field. And we need to answer two questions, how could we render that in page (we use `formatter`), and how could we update the content in admin UI (we use `widget`).

 We will do that like this:
 <code goes here>


View
===================
I touched `View` in the first week I start using Drupal, so it is most basic advanced concept. View is the query UI to help us retrieve data from the DB.

 `fields`, `type`, `filter`, `order` reflect the `select field1, field2, ... fieldn from table where criteria1 order by key1`

And the `view` is doing more than the SQL GUI, it also provide the exposed filter, contextual filter to let user interact (AJAX). No return result message, header, footer is also very help to better the user experiences.

Preprocessor
===================
Hook is powerful but also headache, you can only remember a few of them (like `hook_menu`, `hook_form_alter`, `hook_html`). I would like to take a separate blog for the preprocessor.


Feature
===================
This is a very powerful concept in Drupal. You can export the setting stored in DB to a file, in Drupal we call that 'Feature'. Feature is very helpful in setup environment.

But in the meantime it generate a lot of problem

- It's impossible to change one feature in the same time, the merge conflict cannot be fix, as the code is generated by the machine.
- Odd status when revert, need review, default.
- Export feature time/ resource consuming.


Javascript in Drupal
====================
We use `drupal_add_js`, and could control the position by `weight`, `position`.

Here's a very useful aritcle about `Drupal.behaviors.attach`, we could use context and variable as well.

We could use drupal variable to pass the configuration from admin UI to JS.

Once function in jQuery

more more.


How Foundation work in Drupal
============================
Setup the font size base, use rem to setup breakpoint: small, medium, large, x-large.
Build up the variables (color, font-family)
We put grid in `page.tpl.php` and layout template (used in panel) and any template.
Try to use Foundation class instead of creating customized styling.
If customized styling is needed, it means either create helper class and reuse, or create a component classes and reuse.


Misc
=====================
- phpstorm setup for Drupal give links


